// ============ for the dgraph.h file =================================

// You need to comment this file completely using the How to Comment file.
// We will check to see how well you have commented it

// I am using hw3p3.h which is the most up to date slist.h

#include <iostream>
#include <string>
#include "hw3p3.h"

using namespace std;

const int SIZE = 20;

// this will be in each GTable slot
struct Gvertex
{
  char vertexName;       //the vertex Name
  int outDegree;	//the Out degree
  slist adjacentOnes;   //the adjecent vertices in an slist
  int visit;            // This will hold the visit number in HW7 
};

class dgraph
{

private:
  Gvertex Gtable[SIZE];
  int  countUsed; // how many slots of the Gtable are actually used

public:
 
  dgraph();    // initialize vertexName (blank) and visit numbers (0)
               // initialize countUsed to be 0
  ~dgraph();   // do we have to delete all nodes of slists in table??
	       // Question: If we do not do this, will the llist destructor
               // be called automatically???


  void fillTable();   // read from the input file table.txt and fill GTable

  void displayGraph();  // displays in an easy to read format 

  int findOutDegree(char);  // returns the out degree of a given vertex
	
  slist findAdjacency(char);  // returns the adjacency list of a given vertex

};


// ====   For the dgraph.cpp file ====================================


/* note that Gtable[i].adjacnentOnes is a slist, so you can use
   any slist function on it

Hint on filltable::

while (fin >> Gtable[slot].vertexName)  // if I can read the name
{ // increment the countUsed;
  fin >> Gtable[slot].outDegree;
  // Then for the outDegree times do the following:
     fin >> X;
     (Gtable[slot].adjacentOnes).addRear(x); 
                      // this uses a slist function from HW3
}

Hint on displaygraph::

for (int i = 0; i < coutUsed; i++}
{  

    cout << Gtable[i].vertexname << endl;
    cout << Gtable[i].outdegree << endl;
            (Gtable[i].adjacentOnes).displayAll();
}  
*/

// ====   For the Client file ====================================
/*

You can call findAdjacency in the client:

  slist l1;
  l1 = G.findAdjacency('a');
  // how do you display l1?  Hint: it is an slist from HW3.

*/
